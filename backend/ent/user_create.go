// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/Toneone11/app/ent/booking"
	"github.com/Toneone11/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetDoctorName sets the doctor_name field.
func (uc *UserCreate) SetDoctorName(s string) *UserCreate {
	uc.mutation.SetDoctorName(s)
	return uc
}

// SetDoctorEmail sets the doctor_email field.
func (uc *UserCreate) SetDoctorEmail(s string) *UserCreate {
	uc.mutation.SetDoctorEmail(s)
	return uc
}

// AddDoctorIDIDs adds the doctor_id edge to Booking by ids.
func (uc *UserCreate) AddDoctorIDIDs(ids ...int) *UserCreate {
	uc.mutation.AddDoctorIDIDs(ids...)
	return uc
}

// AddDoctorID adds the doctor_id edges to Booking.
func (uc *UserCreate) AddDoctorID(b ...*Booking) *UserCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uc.AddDoctorIDIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if _, ok := uc.mutation.DoctorName(); !ok {
		return nil, &ValidationError{Name: "doctor_name", err: errors.New("ent: missing required field \"doctor_name\"")}
	}
	if v, ok := uc.mutation.DoctorName(); ok {
		if err := user.DoctorNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "doctor_name", err: fmt.Errorf("ent: validator failed for field \"doctor_name\": %w", err)}
		}
	}
	if _, ok := uc.mutation.DoctorEmail(); !ok {
		return nil, &ValidationError{Name: "doctor_email", err: errors.New("ent: missing required field \"doctor_email\"")}
	}
	if v, ok := uc.mutation.DoctorEmail(); ok {
		if err := user.DoctorEmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "doctor_email", err: fmt.Errorf("ent: validator failed for field \"doctor_email\": %w", err)}
		}
	}
	var (
		err  error
		node *User
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	u, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.DoctorName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDoctorName,
		})
		u.DoctorName = value
	}
	if value, ok := uc.mutation.DoctorEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDoctorEmail,
		})
		u.DoctorEmail = value
	}
	if nodes := uc.mutation.DoctorIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DoctorIDTable,
			Columns: []string{user.DoctorIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return u, _spec
}
