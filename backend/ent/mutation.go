// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/Toneone11/app/ent/booking"
	"github.com/Toneone11/app/ent/operationroom"
	"github.com/Toneone11/app/ent/patient"
	"github.com/Toneone11/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBooking       = "Booking"
	TypeOperationroom = "Operationroom"
	TypePatient       = "Patient"
	TypeUser          = "User"
)

// BookingMutation represents an operation that mutate the Bookings
// nodes in the graph.
type BookingMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	date                    *time.Time
	clearedFields           map[string]struct{}
	doctor_id               *int
	cleareddoctor_id        bool
	patient_id              *int
	clearedpatient_id       bool
	operationroom_id        *int
	clearedoperationroom_id bool
	done                    bool
	oldValue                func(context.Context) (*Booking, error)
}

var _ ent.Mutation = (*BookingMutation)(nil)

// bookingOption allows to manage the mutation configuration using functional options.
type bookingOption func(*BookingMutation)

// newBookingMutation creates new mutation for $n.Name.
func newBookingMutation(c config, op Op, opts ...bookingOption) *BookingMutation {
	m := &BookingMutation{
		config:        c,
		op:            op,
		typ:           TypeBooking,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookingID sets the id field of the mutation.
func withBookingID(id int) bookingOption {
	return func(m *BookingMutation) {
		var (
			err   error
			once  sync.Once
			value *Booking
		)
		m.oldValue = func(ctx context.Context) (*Booking, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Booking.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBooking sets the old Booking of the mutation.
func withBooking(node *Booking) bookingOption {
	return func(m *BookingMutation) {
		m.oldValue = func(context.Context) (*Booking, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BookingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDate sets the date field.
func (m *BookingMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the date value in the mutation.
func (m *BookingMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old date value of the Booking.
// If the Booking object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BookingMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate reset all changes of the "date" field.
func (m *BookingMutation) ResetDate() {
	m.date = nil
}

// SetDoctorIDID sets the doctor_id edge to User by id.
func (m *BookingMutation) SetDoctorIDID(id int) {
	m.doctor_id = &id
}

// ClearDoctorID clears the doctor_id edge to User.
func (m *BookingMutation) ClearDoctorID() {
	m.cleareddoctor_id = true
}

// DoctorIDCleared returns if the edge doctor_id was cleared.
func (m *BookingMutation) DoctorIDCleared() bool {
	return m.cleareddoctor_id
}

// DoctorIDID returns the doctor_id id in the mutation.
func (m *BookingMutation) DoctorIDID() (id int, exists bool) {
	if m.doctor_id != nil {
		return *m.doctor_id, true
	}
	return
}

// DoctorIDIDs returns the doctor_id ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DoctorIDID instead. It exists only for internal usage by the builders.
func (m *BookingMutation) DoctorIDIDs() (ids []int) {
	if id := m.doctor_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDoctorID reset all changes of the "doctor_id" edge.
func (m *BookingMutation) ResetDoctorID() {
	m.doctor_id = nil
	m.cleareddoctor_id = false
}

// SetPatientIDID sets the patient_id edge to Patient by id.
func (m *BookingMutation) SetPatientIDID(id int) {
	m.patient_id = &id
}

// ClearPatientID clears the patient_id edge to Patient.
func (m *BookingMutation) ClearPatientID() {
	m.clearedpatient_id = true
}

// PatientIDCleared returns if the edge patient_id was cleared.
func (m *BookingMutation) PatientIDCleared() bool {
	return m.clearedpatient_id
}

// PatientIDID returns the patient_id id in the mutation.
func (m *BookingMutation) PatientIDID() (id int, exists bool) {
	if m.patient_id != nil {
		return *m.patient_id, true
	}
	return
}

// PatientIDIDs returns the patient_id ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientIDID instead. It exists only for internal usage by the builders.
func (m *BookingMutation) PatientIDIDs() (ids []int) {
	if id := m.patient_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatientID reset all changes of the "patient_id" edge.
func (m *BookingMutation) ResetPatientID() {
	m.patient_id = nil
	m.clearedpatient_id = false
}

// SetOperationroomIDID sets the operationroom_id edge to Operationroom by id.
func (m *BookingMutation) SetOperationroomIDID(id int) {
	m.operationroom_id = &id
}

// ClearOperationroomID clears the operationroom_id edge to Operationroom.
func (m *BookingMutation) ClearOperationroomID() {
	m.clearedoperationroom_id = true
}

// OperationroomIDCleared returns if the edge operationroom_id was cleared.
func (m *BookingMutation) OperationroomIDCleared() bool {
	return m.clearedoperationroom_id
}

// OperationroomIDID returns the operationroom_id id in the mutation.
func (m *BookingMutation) OperationroomIDID() (id int, exists bool) {
	if m.operationroom_id != nil {
		return *m.operationroom_id, true
	}
	return
}

// OperationroomIDIDs returns the operationroom_id ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OperationroomIDID instead. It exists only for internal usage by the builders.
func (m *BookingMutation) OperationroomIDIDs() (ids []int) {
	if id := m.operationroom_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOperationroomID reset all changes of the "operationroom_id" edge.
func (m *BookingMutation) ResetOperationroomID() {
	m.operationroom_id = nil
	m.clearedoperationroom_id = false
}

// Op returns the operation name.
func (m *BookingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Booking).
func (m *BookingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BookingMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.date != nil {
		fields = append(fields, booking.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BookingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case booking.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BookingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case booking.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown Booking field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BookingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case booking.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown Booking field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BookingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BookingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BookingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Booking numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BookingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BookingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Booking nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BookingMutation) ResetField(name string) error {
	switch name {
	case booking.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Booking field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BookingMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.doctor_id != nil {
		edges = append(edges, booking.EdgeDoctorID)
	}
	if m.patient_id != nil {
		edges = append(edges, booking.EdgePatientID)
	}
	if m.operationroom_id != nil {
		edges = append(edges, booking.EdgeOperationroomID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BookingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case booking.EdgeDoctorID:
		if id := m.doctor_id; id != nil {
			return []ent.Value{*id}
		}
	case booking.EdgePatientID:
		if id := m.patient_id; id != nil {
			return []ent.Value{*id}
		}
	case booking.EdgeOperationroomID:
		if id := m.operationroom_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BookingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BookingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BookingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddoctor_id {
		edges = append(edges, booking.EdgeDoctorID)
	}
	if m.clearedpatient_id {
		edges = append(edges, booking.EdgePatientID)
	}
	if m.clearedoperationroom_id {
		edges = append(edges, booking.EdgeOperationroomID)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BookingMutation) EdgeCleared(name string) bool {
	switch name {
	case booking.EdgeDoctorID:
		return m.cleareddoctor_id
	case booking.EdgePatientID:
		return m.clearedpatient_id
	case booking.EdgeOperationroomID:
		return m.clearedoperationroom_id
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BookingMutation) ClearEdge(name string) error {
	switch name {
	case booking.EdgeDoctorID:
		m.ClearDoctorID()
		return nil
	case booking.EdgePatientID:
		m.ClearPatientID()
		return nil
	case booking.EdgeOperationroomID:
		m.ClearOperationroomID()
		return nil
	}
	return fmt.Errorf("unknown Booking unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BookingMutation) ResetEdge(name string) error {
	switch name {
	case booking.EdgeDoctorID:
		m.ResetDoctorID()
		return nil
	case booking.EdgePatientID:
		m.ResetPatientID()
		return nil
	case booking.EdgeOperationroomID:
		m.ResetOperationroomID()
		return nil
	}
	return fmt.Errorf("unknown Booking edge %s", name)
}

// OperationroomMutation represents an operation that mutate the Operationrooms
// nodes in the graph.
type OperationroomMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	operationroom_name      *string
	clearedFields           map[string]struct{}
	operationroom_id        map[int]struct{}
	removedoperationroom_id map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*Operationroom, error)
}

var _ ent.Mutation = (*OperationroomMutation)(nil)

// operationroomOption allows to manage the mutation configuration using functional options.
type operationroomOption func(*OperationroomMutation)

// newOperationroomMutation creates new mutation for $n.Name.
func newOperationroomMutation(c config, op Op, opts ...operationroomOption) *OperationroomMutation {
	m := &OperationroomMutation{
		config:        c,
		op:            op,
		typ:           TypeOperationroom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOperationroomID sets the id field of the mutation.
func withOperationroomID(id int) operationroomOption {
	return func(m *OperationroomMutation) {
		var (
			err   error
			once  sync.Once
			value *Operationroom
		)
		m.oldValue = func(ctx context.Context) (*Operationroom, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Operationroom.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOperationroom sets the old Operationroom of the mutation.
func withOperationroom(node *Operationroom) operationroomOption {
	return func(m *OperationroomMutation) {
		m.oldValue = func(context.Context) (*Operationroom, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OperationroomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OperationroomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *OperationroomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetOperationroomName sets the operationroom_name field.
func (m *OperationroomMutation) SetOperationroomName(s string) {
	m.operationroom_name = &s
}

// OperationroomName returns the operationroom_name value in the mutation.
func (m *OperationroomMutation) OperationroomName() (r string, exists bool) {
	v := m.operationroom_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOperationroomName returns the old operationroom_name value of the Operationroom.
// If the Operationroom object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *OperationroomMutation) OldOperationroomName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOperationroomName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOperationroomName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperationroomName: %w", err)
	}
	return oldValue.OperationroomName, nil
}

// ResetOperationroomName reset all changes of the "operationroom_name" field.
func (m *OperationroomMutation) ResetOperationroomName() {
	m.operationroom_name = nil
}

// AddOperationroomIDIDs adds the operationroom_id edge to Booking by ids.
func (m *OperationroomMutation) AddOperationroomIDIDs(ids ...int) {
	if m.operationroom_id == nil {
		m.operationroom_id = make(map[int]struct{})
	}
	for i := range ids {
		m.operationroom_id[ids[i]] = struct{}{}
	}
}

// RemoveOperationroomIDIDs removes the operationroom_id edge to Booking by ids.
func (m *OperationroomMutation) RemoveOperationroomIDIDs(ids ...int) {
	if m.removedoperationroom_id == nil {
		m.removedoperationroom_id = make(map[int]struct{})
	}
	for i := range ids {
		m.removedoperationroom_id[ids[i]] = struct{}{}
	}
}

// RemovedOperationroomID returns the removed ids of operationroom_id.
func (m *OperationroomMutation) RemovedOperationroomIDIDs() (ids []int) {
	for id := range m.removedoperationroom_id {
		ids = append(ids, id)
	}
	return
}

// OperationroomIDIDs returns the operationroom_id ids in the mutation.
func (m *OperationroomMutation) OperationroomIDIDs() (ids []int) {
	for id := range m.operationroom_id {
		ids = append(ids, id)
	}
	return
}

// ResetOperationroomID reset all changes of the "operationroom_id" edge.
func (m *OperationroomMutation) ResetOperationroomID() {
	m.operationroom_id = nil
	m.removedoperationroom_id = nil
}

// Op returns the operation name.
func (m *OperationroomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Operationroom).
func (m *OperationroomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *OperationroomMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.operationroom_name != nil {
		fields = append(fields, operationroom.FieldOperationroomName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *OperationroomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case operationroom.FieldOperationroomName:
		return m.OperationroomName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *OperationroomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case operationroom.FieldOperationroomName:
		return m.OldOperationroomName(ctx)
	}
	return nil, fmt.Errorf("unknown Operationroom field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *OperationroomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case operationroom.FieldOperationroomName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperationroomName(v)
		return nil
	}
	return fmt.Errorf("unknown Operationroom field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *OperationroomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *OperationroomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *OperationroomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Operationroom numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *OperationroomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *OperationroomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *OperationroomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Operationroom nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *OperationroomMutation) ResetField(name string) error {
	switch name {
	case operationroom.FieldOperationroomName:
		m.ResetOperationroomName()
		return nil
	}
	return fmt.Errorf("unknown Operationroom field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *OperationroomMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.operationroom_id != nil {
		edges = append(edges, operationroom.EdgeOperationroomID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *OperationroomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case operationroom.EdgeOperationroomID:
		ids := make([]ent.Value, 0, len(m.operationroom_id))
		for id := range m.operationroom_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *OperationroomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedoperationroom_id != nil {
		edges = append(edges, operationroom.EdgeOperationroomID)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *OperationroomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case operationroom.EdgeOperationroomID:
		ids := make([]ent.Value, 0, len(m.removedoperationroom_id))
		for id := range m.removedoperationroom_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *OperationroomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *OperationroomMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *OperationroomMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Operationroom unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *OperationroomMutation) ResetEdge(name string) error {
	switch name {
	case operationroom.EdgeOperationroomID:
		m.ResetOperationroomID()
		return nil
	}
	return fmt.Errorf("unknown Operationroom edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                Op
	typ               string
	id                *int
	patient_name      *string
	patient_age       *int
	addpatient_age    *int
	clearedFields     map[string]struct{}
	patient_id        map[int]struct{}
	removedpatient_id map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientName sets the patient_name field.
func (m *PatientMutation) SetPatientName(s string) {
	m.patient_name = &s
}

// PatientName returns the patient_name value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m.patient_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old patient_name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "patient_name" field.
func (m *PatientMutation) ResetPatientName() {
	m.patient_name = nil
}

// SetPatientAge sets the patient_age field.
func (m *PatientMutation) SetPatientAge(i int) {
	m.patient_age = &i
	m.addpatient_age = nil
}

// PatientAge returns the patient_age value in the mutation.
func (m *PatientMutation) PatientAge() (r int, exists bool) {
	v := m.patient_age
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientAge returns the old patient_age value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientAge: %w", err)
	}
	return oldValue.PatientAge, nil
}

// AddPatientAge adds i to patient_age.
func (m *PatientMutation) AddPatientAge(i int) {
	if m.addpatient_age != nil {
		*m.addpatient_age += i
	} else {
		m.addpatient_age = &i
	}
}

// AddedPatientAge returns the value that was added to the patient_age field in this mutation.
func (m *PatientMutation) AddedPatientAge() (r int, exists bool) {
	v := m.addpatient_age
	if v == nil {
		return
	}
	return *v, true
}

// ResetPatientAge reset all changes of the "patient_age" field.
func (m *PatientMutation) ResetPatientAge() {
	m.patient_age = nil
	m.addpatient_age = nil
}

// AddPatientIDIDs adds the patient_id edge to Booking by ids.
func (m *PatientMutation) AddPatientIDIDs(ids ...int) {
	if m.patient_id == nil {
		m.patient_id = make(map[int]struct{})
	}
	for i := range ids {
		m.patient_id[ids[i]] = struct{}{}
	}
}

// RemovePatientIDIDs removes the patient_id edge to Booking by ids.
func (m *PatientMutation) RemovePatientIDIDs(ids ...int) {
	if m.removedpatient_id == nil {
		m.removedpatient_id = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient_id[ids[i]] = struct{}{}
	}
}

// RemovedPatientID returns the removed ids of patient_id.
func (m *PatientMutation) RemovedPatientIDIDs() (ids []int) {
	for id := range m.removedpatient_id {
		ids = append(ids, id)
	}
	return
}

// PatientIDIDs returns the patient_id ids in the mutation.
func (m *PatientMutation) PatientIDIDs() (ids []int) {
	for id := range m.patient_id {
		ids = append(ids, id)
	}
	return
}

// ResetPatientID reset all changes of the "patient_id" edge.
func (m *PatientMutation) ResetPatientID() {
	m.patient_id = nil
	m.removedpatient_id = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.patient_name != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	if m.patient_age != nil {
		fields = append(fields, patient.FieldPatientAge)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientName:
		return m.PatientName()
	case patient.FieldPatientAge:
		return m.PatientAge()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	case patient.FieldPatientAge:
		return m.OldPatientAge(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	case patient.FieldPatientAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addpatient_age != nil {
		fields = append(fields, patient.FieldPatientAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientAge:
		return m.AddedPatientAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPatientAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	case patient.FieldPatientAge:
		m.ResetPatientAge()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient_id != nil {
		edges = append(edges, patient.EdgePatientID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatientID:
		ids := make([]ent.Value, 0, len(m.patient_id))
		for id := range m.patient_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient_id != nil {
		edges = append(edges, patient.EdgePatientID)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatientID:
		ids := make([]ent.Value, 0, len(m.removedpatient_id))
		for id := range m.removedpatient_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgePatientID:
		m.ResetPatientID()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *int
	doctor_name      *string
	doctor_email     *string
	clearedFields    map[string]struct{}
	doctor_id        map[int]struct{}
	removeddoctor_id map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDoctorName sets the doctor_name field.
func (m *UserMutation) SetDoctorName(s string) {
	m.doctor_name = &s
}

// DoctorName returns the doctor_name value in the mutation.
func (m *UserMutation) DoctorName() (r string, exists bool) {
	v := m.doctor_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorName returns the old doctor_name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldDoctorName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorName: %w", err)
	}
	return oldValue.DoctorName, nil
}

// ResetDoctorName reset all changes of the "doctor_name" field.
func (m *UserMutation) ResetDoctorName() {
	m.doctor_name = nil
}

// SetDoctorEmail sets the doctor_email field.
func (m *UserMutation) SetDoctorEmail(s string) {
	m.doctor_email = &s
}

// DoctorEmail returns the doctor_email value in the mutation.
func (m *UserMutation) DoctorEmail() (r string, exists bool) {
	v := m.doctor_email
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorEmail returns the old doctor_email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldDoctorEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorEmail: %w", err)
	}
	return oldValue.DoctorEmail, nil
}

// ResetDoctorEmail reset all changes of the "doctor_email" field.
func (m *UserMutation) ResetDoctorEmail() {
	m.doctor_email = nil
}

// AddDoctorIDIDs adds the doctor_id edge to Booking by ids.
func (m *UserMutation) AddDoctorIDIDs(ids ...int) {
	if m.doctor_id == nil {
		m.doctor_id = make(map[int]struct{})
	}
	for i := range ids {
		m.doctor_id[ids[i]] = struct{}{}
	}
}

// RemoveDoctorIDIDs removes the doctor_id edge to Booking by ids.
func (m *UserMutation) RemoveDoctorIDIDs(ids ...int) {
	if m.removeddoctor_id == nil {
		m.removeddoctor_id = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddoctor_id[ids[i]] = struct{}{}
	}
}

// RemovedDoctorID returns the removed ids of doctor_id.
func (m *UserMutation) RemovedDoctorIDIDs() (ids []int) {
	for id := range m.removeddoctor_id {
		ids = append(ids, id)
	}
	return
}

// DoctorIDIDs returns the doctor_id ids in the mutation.
func (m *UserMutation) DoctorIDIDs() (ids []int) {
	for id := range m.doctor_id {
		ids = append(ids, id)
	}
	return
}

// ResetDoctorID reset all changes of the "doctor_id" edge.
func (m *UserMutation) ResetDoctorID() {
	m.doctor_id = nil
	m.removeddoctor_id = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.doctor_name != nil {
		fields = append(fields, user.FieldDoctorName)
	}
	if m.doctor_email != nil {
		fields = append(fields, user.FieldDoctorEmail)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldDoctorName:
		return m.DoctorName()
	case user.FieldDoctorEmail:
		return m.DoctorEmail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldDoctorName:
		return m.OldDoctorName(ctx)
	case user.FieldDoctorEmail:
		return m.OldDoctorEmail(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldDoctorName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorName(v)
		return nil
	case user.FieldDoctorEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorEmail(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldDoctorName:
		m.ResetDoctorName()
		return nil
	case user.FieldDoctorEmail:
		m.ResetDoctorEmail()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.doctor_id != nil {
		edges = append(edges, user.EdgeDoctorID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDoctorID:
		ids := make([]ent.Value, 0, len(m.doctor_id))
		for id := range m.doctor_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddoctor_id != nil {
		edges = append(edges, user.EdgeDoctorID)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDoctorID:
		ids := make([]ent.Value, 0, len(m.removeddoctor_id))
		for id := range m.removeddoctor_id {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeDoctorID:
		m.ResetDoctorID()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
