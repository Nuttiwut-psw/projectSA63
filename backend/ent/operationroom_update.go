// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/Toneone11/app/ent/booking"
	"github.com/Toneone11/app/ent/operationroom"
	"github.com/Toneone11/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// OperationroomUpdate is the builder for updating Operationroom entities.
type OperationroomUpdate struct {
	config
	hooks      []Hook
	mutation   *OperationroomMutation
	predicates []predicate.Operationroom
}

// Where adds a new predicate for the builder.
func (ou *OperationroomUpdate) Where(ps ...predicate.Operationroom) *OperationroomUpdate {
	ou.predicates = append(ou.predicates, ps...)
	return ou
}

// SetOperationroomName sets the operationroom_name field.
func (ou *OperationroomUpdate) SetOperationroomName(s string) *OperationroomUpdate {
	ou.mutation.SetOperationroomName(s)
	return ou
}

// AddOperationroomIDIDs adds the operationroom_id edge to Booking by ids.
func (ou *OperationroomUpdate) AddOperationroomIDIDs(ids ...int) *OperationroomUpdate {
	ou.mutation.AddOperationroomIDIDs(ids...)
	return ou
}

// AddOperationroomID adds the operationroom_id edges to Booking.
func (ou *OperationroomUpdate) AddOperationroomID(b ...*Booking) *OperationroomUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ou.AddOperationroomIDIDs(ids...)
}

// Mutation returns the OperationroomMutation object of the builder.
func (ou *OperationroomUpdate) Mutation() *OperationroomMutation {
	return ou.mutation
}

// RemoveOperationroomIDIDs removes the operationroom_id edge to Booking by ids.
func (ou *OperationroomUpdate) RemoveOperationroomIDIDs(ids ...int) *OperationroomUpdate {
	ou.mutation.RemoveOperationroomIDIDs(ids...)
	return ou
}

// RemoveOperationroomID removes operationroom_id edges to Booking.
func (ou *OperationroomUpdate) RemoveOperationroomID(b ...*Booking) *OperationroomUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ou.RemoveOperationroomIDIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ou *OperationroomUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ou.mutation.OperationroomName(); ok {
		if err := operationroom.OperationroomNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "operationroom_name", err: fmt.Errorf("ent: validator failed for field \"operationroom_name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperationroomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperationroomUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperationroomUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperationroomUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OperationroomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   operationroom.Table,
			Columns: operationroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operationroom.FieldID,
			},
		},
	}
	if ps := ou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OperationroomName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operationroom.FieldOperationroomName,
		})
	}
	if nodes := ou.mutation.RemovedOperationroomIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationroom.OperationroomIDTable,
			Columns: []string{operationroom.OperationroomIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OperationroomIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationroom.OperationroomIDTable,
			Columns: []string{operationroom.OperationroomIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operationroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// OperationroomUpdateOne is the builder for updating a single Operationroom entity.
type OperationroomUpdateOne struct {
	config
	hooks    []Hook
	mutation *OperationroomMutation
}

// SetOperationroomName sets the operationroom_name field.
func (ouo *OperationroomUpdateOne) SetOperationroomName(s string) *OperationroomUpdateOne {
	ouo.mutation.SetOperationroomName(s)
	return ouo
}

// AddOperationroomIDIDs adds the operationroom_id edge to Booking by ids.
func (ouo *OperationroomUpdateOne) AddOperationroomIDIDs(ids ...int) *OperationroomUpdateOne {
	ouo.mutation.AddOperationroomIDIDs(ids...)
	return ouo
}

// AddOperationroomID adds the operationroom_id edges to Booking.
func (ouo *OperationroomUpdateOne) AddOperationroomID(b ...*Booking) *OperationroomUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ouo.AddOperationroomIDIDs(ids...)
}

// Mutation returns the OperationroomMutation object of the builder.
func (ouo *OperationroomUpdateOne) Mutation() *OperationroomMutation {
	return ouo.mutation
}

// RemoveOperationroomIDIDs removes the operationroom_id edge to Booking by ids.
func (ouo *OperationroomUpdateOne) RemoveOperationroomIDIDs(ids ...int) *OperationroomUpdateOne {
	ouo.mutation.RemoveOperationroomIDIDs(ids...)
	return ouo
}

// RemoveOperationroomID removes operationroom_id edges to Booking.
func (ouo *OperationroomUpdateOne) RemoveOperationroomID(b ...*Booking) *OperationroomUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ouo.RemoveOperationroomIDIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ouo *OperationroomUpdateOne) Save(ctx context.Context) (*Operationroom, error) {
	if v, ok := ouo.mutation.OperationroomName(); ok {
		if err := operationroom.OperationroomNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "operationroom_name", err: fmt.Errorf("ent: validator failed for field \"operationroom_name\": %w", err)}
		}
	}

	var (
		err  error
		node *Operationroom
	)
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperationroomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperationroomUpdateOne) SaveX(ctx context.Context) *Operationroom {
	o, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return o
}

// Exec executes the query on the entity.
func (ouo *OperationroomUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperationroomUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OperationroomUpdateOne) sqlSave(ctx context.Context) (o *Operationroom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   operationroom.Table,
			Columns: operationroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operationroom.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Operationroom.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ouo.mutation.OperationroomName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operationroom.FieldOperationroomName,
		})
	}
	if nodes := ouo.mutation.RemovedOperationroomIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationroom.OperationroomIDTable,
			Columns: []string{operationroom.OperationroomIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OperationroomIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationroom.OperationroomIDTable,
			Columns: []string{operationroom.OperationroomIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	o = &Operationroom{config: ouo.config}
	_spec.Assign = o.assignValues
	_spec.ScanValues = o.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operationroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return o, nil
}
