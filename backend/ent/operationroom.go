// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Toneone11/app/ent/operationroom"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Operationroom is the model entity for the Operationroom schema.
type Operationroom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OperationroomName holds the value of the "operationroom_name" field.
	OperationroomName string `json:"operationroom_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperationroomQuery when eager-loading is set.
	Edges OperationroomEdges `json:"edges"`
}

// OperationroomEdges holds the relations/edges for other nodes in the graph.
type OperationroomEdges struct {
	// OperationroomID holds the value of the operationroom_id edge.
	OperationroomID []*Booking
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OperationroomIDOrErr returns the OperationroomID value or an error if the edge
// was not loaded in eager-loading.
func (e OperationroomEdges) OperationroomIDOrErr() ([]*Booking, error) {
	if e.loadedTypes[0] {
		return e.OperationroomID, nil
	}
	return nil, &NotLoadedError{edge: "operationroom_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operationroom) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // operationroom_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operationroom fields.
func (o *Operationroom) assignValues(values ...interface{}) error {
	if m, n := len(values), len(operationroom.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field operationroom_name", values[0])
	} else if value.Valid {
		o.OperationroomName = value.String
	}
	return nil
}

// QueryOperationroomID queries the operationroom_id edge of the Operationroom.
func (o *Operationroom) QueryOperationroomID() *BookingQuery {
	return (&OperationroomClient{config: o.config}).QueryOperationroomID(o)
}

// Update returns a builder for updating this Operationroom.
// Note that, you need to call Operationroom.Unwrap() before calling this method, if this Operationroom
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operationroom) Update() *OperationroomUpdateOne {
	return (&OperationroomClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Operationroom) Unwrap() *Operationroom {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operationroom is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operationroom) String() string {
	var builder strings.Builder
	builder.WriteString("Operationroom(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", operationroom_name=")
	builder.WriteString(o.OperationroomName)
	builder.WriteByte(')')
	return builder.String()
}

// Operationrooms is a parsable slice of Operationroom.
type Operationrooms []*Operationroom

func (o Operationrooms) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
