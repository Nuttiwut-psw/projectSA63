// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/Toneone11/app/ent/booking"
	"github.com/Toneone11/app/ent/operationroom"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// OperationroomCreate is the builder for creating a Operationroom entity.
type OperationroomCreate struct {
	config
	mutation *OperationroomMutation
	hooks    []Hook
}

// SetOperationroomName sets the operationroom_name field.
func (oc *OperationroomCreate) SetOperationroomName(s string) *OperationroomCreate {
	oc.mutation.SetOperationroomName(s)
	return oc
}

// AddOperationroomIDIDs adds the operationroom_id edge to Booking by ids.
func (oc *OperationroomCreate) AddOperationroomIDIDs(ids ...int) *OperationroomCreate {
	oc.mutation.AddOperationroomIDIDs(ids...)
	return oc
}

// AddOperationroomID adds the operationroom_id edges to Booking.
func (oc *OperationroomCreate) AddOperationroomID(b ...*Booking) *OperationroomCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return oc.AddOperationroomIDIDs(ids...)
}

// Mutation returns the OperationroomMutation object of the builder.
func (oc *OperationroomCreate) Mutation() *OperationroomMutation {
	return oc.mutation
}

// Save creates the Operationroom in the database.
func (oc *OperationroomCreate) Save(ctx context.Context) (*Operationroom, error) {
	if _, ok := oc.mutation.OperationroomName(); !ok {
		return nil, &ValidationError{Name: "operationroom_name", err: errors.New("ent: missing required field \"operationroom_name\"")}
	}
	if v, ok := oc.mutation.OperationroomName(); ok {
		if err := operationroom.OperationroomNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "operationroom_name", err: fmt.Errorf("ent: validator failed for field \"operationroom_name\": %w", err)}
		}
	}
	var (
		err  error
		node *Operationroom
	)
	if len(oc.hooks) == 0 {
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OperationroomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OperationroomCreate) SaveX(ctx context.Context) *Operationroom {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (oc *OperationroomCreate) sqlSave(ctx context.Context) (*Operationroom, error) {
	o, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	o.ID = int(id)
	return o, nil
}

func (oc *OperationroomCreate) createSpec() (*Operationroom, *sqlgraph.CreateSpec) {
	var (
		o     = &Operationroom{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: operationroom.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operationroom.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.OperationroomName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: operationroom.FieldOperationroomName,
		})
		o.OperationroomName = value
	}
	if nodes := oc.mutation.OperationroomIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operationroom.OperationroomIDTable,
			Columns: []string{operationroom.OperationroomIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: booking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return o, _spec
}
