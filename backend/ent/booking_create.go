// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/Toneone11/app/ent/booking"
	"github.com/Toneone11/app/ent/operationroom"
	"github.com/Toneone11/app/ent/patient"
	"github.com/Toneone11/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BookingCreate is the builder for creating a Booking entity.
type BookingCreate struct {
	config
	mutation *BookingMutation
	hooks    []Hook
}

// SetDate sets the date field.
func (bc *BookingCreate) SetDate(t time.Time) *BookingCreate {
	bc.mutation.SetDate(t)
	return bc
}

// SetDoctorIDID sets the doctor_id edge to User by id.
func (bc *BookingCreate) SetDoctorIDID(id int) *BookingCreate {
	bc.mutation.SetDoctorIDID(id)
	return bc
}

// SetNillableDoctorIDID sets the doctor_id edge to User by id if the given value is not nil.
func (bc *BookingCreate) SetNillableDoctorIDID(id *int) *BookingCreate {
	if id != nil {
		bc = bc.SetDoctorIDID(*id)
	}
	return bc
}

// SetDoctorID sets the doctor_id edge to User.
func (bc *BookingCreate) SetDoctorID(u *User) *BookingCreate {
	return bc.SetDoctorIDID(u.ID)
}

// SetPatientIDID sets the patient_id edge to Patient by id.
func (bc *BookingCreate) SetPatientIDID(id int) *BookingCreate {
	bc.mutation.SetPatientIDID(id)
	return bc
}

// SetNillablePatientIDID sets the patient_id edge to Patient by id if the given value is not nil.
func (bc *BookingCreate) SetNillablePatientIDID(id *int) *BookingCreate {
	if id != nil {
		bc = bc.SetPatientIDID(*id)
	}
	return bc
}

// SetPatientID sets the patient_id edge to Patient.
func (bc *BookingCreate) SetPatientID(p *Patient) *BookingCreate {
	return bc.SetPatientIDID(p.ID)
}

// SetOperationroomIDID sets the operationroom_id edge to Operationroom by id.
func (bc *BookingCreate) SetOperationroomIDID(id int) *BookingCreate {
	bc.mutation.SetOperationroomIDID(id)
	return bc
}

// SetNillableOperationroomIDID sets the operationroom_id edge to Operationroom by id if the given value is not nil.
func (bc *BookingCreate) SetNillableOperationroomIDID(id *int) *BookingCreate {
	if id != nil {
		bc = bc.SetOperationroomIDID(*id)
	}
	return bc
}

// SetOperationroomID sets the operationroom_id edge to Operationroom.
func (bc *BookingCreate) SetOperationroomID(o *Operationroom) *BookingCreate {
	return bc.SetOperationroomIDID(o.ID)
}

// Mutation returns the BookingMutation object of the builder.
func (bc *BookingCreate) Mutation() *BookingMutation {
	return bc.mutation
}

// Save creates the Booking in the database.
func (bc *BookingCreate) Save(ctx context.Context) (*Booking, error) {
	if _, ok := bc.mutation.Date(); !ok {
		return nil, &ValidationError{Name: "date", err: errors.New("ent: missing required field \"date\"")}
	}
	var (
		err  error
		node *Booking
	)
	if len(bc.hooks) == 0 {
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookingCreate) SaveX(ctx context.Context) *Booking {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BookingCreate) sqlSave(ctx context.Context) (*Booking, error) {
	b, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}

func (bc *BookingCreate) createSpec() (*Booking, *sqlgraph.CreateSpec) {
	var (
		b     = &Booking{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: booking.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: booking.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: booking.FieldDate,
		})
		b.Date = value
	}
	if nodes := bc.mutation.DoctorIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.DoctorIDTable,
			Columns: []string{booking.DoctorIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.PatientIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.PatientIDTable,
			Columns: []string{booking.PatientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.OperationroomIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   booking.OperationroomIDTable,
			Columns: []string{booking.OperationroomIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: operationroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return b, _spec
}
